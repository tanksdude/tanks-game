0.2.4 (obviously definitely not here)
* abstracted the renderer somewhat
    * it's still not very efficient but it gets the job done
* level effects (wind, ice, mines)
* more levels

0.2.3 "features" (obviously not here)
* powerups:
    * banana power!
    * godmode (still needs some work)
    * [dev power] "inversion": switches turning direction of tank
* hazards:
    * hazard randomization
    * other lightning hazards
        * vertical lightning
        * lightning rectangle
        * lightning circle
        * lightning bolt hit detection updated: all lightning bolts choose points closest to the tank/bullet
    * no bullet zone
    * turret?
* level: "many hazards" (from JS Tanks)
* ability to weight levels and powers when selecting them randomly
* minor things:
    * tankpower bullet attribute changes moved to bulletpowers (a moderate rewrite was needed)
    * a "special key" for tanks (does nothing right now)
    * visual cue for tank death, refactored handling of tank death
    * minimal drawing layers: "under", regular, "effects", debug
    * more cleanup
    * GPU stuff: encourage all objects towards making their own vertices, privately
    * actually fixed homing power... whoops...

0.2.2.2
* two more levels to make the game less empty
    * I'm not very original, so they're from JS Tanks...
    * "few obstacles" and "concealed powerups"
* adding walls and powerups symmetrically to a level is now much easier

0.2.2.1
* cleanup
    * made levels function more like powerups (to a developer)
* homing power stopped working last version... it works now... whoops...

0.2.2
* horizontal lightning hazard
    * other lightning hazards will come later
* rectangular and circular lava hazards
* complete priority handling overhaul
* minor things:
    * levels and powerups can be grouped
    * a start towards a "game manager"
    * misc cleanup

0.2.1
* switched back to static vertex buffers
    * batching probably not possible in this state but I'll save that for another day
* better system for tankpowers adjusting tank values
* a few things moved out of main.cpp (mostly event handlers)
* big (and megadeath) bullet can destroy turrets
* glm moved to Dependencies from res/vendor

0.2.0
* all objects stream their vertices to VRAM
    * I was expecting a massive performance increase but got fewer frames and a VRAM spike (~4x worse performance)
    * batching is probably easier to implement now
* stationary turret shows its barrel

0.1.4 "gamify"
* actual levels used instead of only the developer level
    * ackchyually there were other levels in the game but they were only selectable if you changed a few lines
* other cleanup that makes developing easier:
    * constants file fixed up, now holds default constant values for things (stuff like tank radius and game width/height)
    * class managers (bullet, tank, hazard, key presses, etc.)
    * tick() separated into parts (not a big change but... cleanup!)
    * initialization stuff in main() cleaned up
* constants and speeds restored to faster JS settings because slow Tanks isn't fun Tanks
    * not all speeds are faster and not all are JS settings but it's better now

0.1.3
* hazards (no hazard powers yet)
* stationary turret mostly implemented
    * doesn't display its shooting angle 

0.1.2.1
* added a fun level: only has simple powerups and big (fun with superfast shooting)
* big bullet size stacks (and other stuff can also stack)

0.1.2
* bullet acceleration (needs work)
* corridor level
* transparency in color is interpreted (not fully implemented) (also disabled now)
* powerups: grenade, fire, blast

0.1.1
* invincibility n' stuff (invincibility, big, megadeath)
* cleaned up how powers interacted

0.1.0:
* rendering on GPU!
* lost the ability to draw tank names but that's okay

0.0.7.1:
* cleanup for me (very little actual change)

0.0.7 and before:
* stuff. primarily the framework and some powers to test the framework. (look at commit history)

future notes:
0.3.0: an ini file
0.4.0: mods? hazardpowers?
0.5.0: priorities for the power modification functions?
0.A.B: graphs for diagnostics
0.X.0: big change in levels or powers or something else, like bulletpower memory management (std::shared_ptr)
0.A.0: batching
0.B.0: multithreading? (std::async to start)
1.0.0: all levels, powers, and other stuff that I want
2.0.0: level editor and/or power editor and/or game engine something thing (save for sequel instead?)

other note: consider SDL instead of FreeGLUT
